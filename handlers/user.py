from bot import dp, bot

from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message, CallbackQuery,
)
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram import F

from models.dbs.users import *
from models.dbs.message import *
from models.dbs.reviews import *

from .callbacks import *
from .markups import *
from .states import *

import datetime

CHANNEL_ID = -1001980386639


async def everyday_task():
    for user in User.get_all_users():
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_ID,
                                               user_id=user.telegram_id)
            if member.status.name != 'LEFT':
                if user.trialed:
                    if (datetime.datetime.now() - user.start_trial_date).days == 1:
                        await bot.send_message(chat_id=user.telegram_id,
                                            text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—åüòî\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏üëá',
                                            reply_markup=subscribe_keyboard)
                        await kick_user(telegram_id=user.telegram_id)
                        return

                if (datetime.datetime.now() - user.finish_date).days == -3:
                    await bot.send_message(chat_id=user.telegram_id,
                                        text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∏ –¥–Ω—è. –ü—Ä–æ–¥–ª–∏—Ç—åüëá',
                                        reply_markup=subscribe_keyboard)
                    return
                if (datetime.datetime.now() - user.finish_date).days >= 0:
                    await bot.send_message(chat_id=user.telegram_id,
                                        text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—åüòî\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏üëá',
                                        reply_markup=subscribe_keyboard)
                    await kick_user(telegram_id=user.telegram_id)
        except:
            pass
        
async def kick_user(telegram_id: int):
    await bot.ban_chat_member(chat_id=CHANNEL_ID,
                              user_id=telegram_id)
    await bot.unban_chat_member(chat_id=CHANNEL_ID,
                                user_id=telegram_id)


@dp.message(F.text == '–ó–∞–∫—Ä—ã—Ç—å')
@dp.message(Command('start'))
async def start_message(message: Message, state: FSMContext):
    if User.get_by_telegram_id(message.from_user.id) == None:
        user = User(telegram_id=message.from_user.id,
                    full_name=message.from_user.full_name,
                    username=message.from_user.username)
        user.save()
        
    start_text = f'''–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>
    
–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–î–∞–Ω–∏–∏–ª</b>.
–Ø –ø—Ä–µ–ø–æ–¥–∞—é –π–æ–≥—É –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ FYSM¬†–≤ <b>–∑–∞–∫—Ä—ã—Ç–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ</b> ¬´<i>–°–ê–î–•–ê–ö–ò</i>¬ª.

–¢–∞–º –µ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ <b>–∑–∞–ø–∏—Å–∏ –∏ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ</b>.

–í—ã –º–æ–∂–µ—Ç–µ <i>–≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –Ω–∞ 24 —á–∞—Å–∞, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∞–º, —Ç–∞–∫ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</i>
'''
    await message.answer(
        text=start_text,
        reply_markup=start_keyboard
    )
    
@dp.callback_query(F.data == 'close')
async def close_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

@dp.message(F.text == 'üßòüèª‚Äç‚ôÇÔ∏è–û–±–æ –º–Ω–µ')
async def about_me(message: Message, state: FSMContext):
    await message.delete()
    
    photo = Messages.get_by_name(name='about_me_photo').info
    caption = '''–Ø –ø—Ä–µ–ø–æ–¥–∞—é –π–æ–≥—É –≤ —Å—Ç–∏–ª–µ FYSM. –î–≤–∞ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥ —É –º–µ–Ω—è –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π, –∂–µ–ª—É–¥–∫–æ–º, –º–æ—Ä–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –∏ –≤—Å–µ–≥–æ –∑–∞ –æ–¥–∏–Ω –≥–æ–¥ –ø—Ä–∞–∫—Ç–∏–∫–∏, —è –∏–∑–±–∞–≤–∏–ª—Å—è –æ—Ç –≤—Å–µ—Ö —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –±–æ–ª—è—á–µ–∫ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ —Å—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    
–Ø –ø—Ä–∏—à–µ–ª –≤ –π–æ–≥—É –Ω–µ –æ—Ç —Ö–æ—Ä–æ—à–µ–π –∂–∏–∑–Ω–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –π–æ–≥–∞ —Å–º–æ–≥–ª–∞ –ø–æ–º–æ—á—å –º–Ω–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É.

–ó–∞ —ç—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ —è –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏—à–µ–ª –∫ —Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —É –º–µ–Ω—è –µ—Å—Ç—å:
‚Äî —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –Ω–∞ —Ä—É–∫–∞—Ö
‚Äî –≥–∏–±–∫–æ—Å—Ç—å
‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
–∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∞—Å–∏–≤—ã–µ –∞—Å–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ –º–æ–µ–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ.'''
    await bot.send_photo(photo=photo,
                         caption=caption,
                         chat_id=message.from_user.id,
                         reply_markup=close_keyboard)
    
@dp.message(F.text == '‚úçÔ∏è–ü–æ–¥–ø–∏—Å–∫–∞')
async def subscribe_message(message: Message, state: FSMContext):
    subscribe_text = '''–ù–∞ –∫–∞–Ω–∞–ª–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–∞–º –Ω–µ—Ç –ª–æ—Ç–æ—Å–æ–≤ –∏ —Å—Ç–æ–µ–∫ –Ω–∞ –≥–æ–ª–æ–≤–µ, –Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è –æ–Ω–∏ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –ø–æ—Å—Ç—Ä–æ—è—Ç –º—ã—à–µ—á–Ω—ã–π –∫–æ—Ä—Å–µ—Ç, –ø–æ–¥—Ç—è–Ω—É—Ç –≤–∞—à–µ —Ç–µ–ª–æ, —Ä–∞–∑–æ–≤—å—é—Ç –≥–∏–±–∫–æ—Å—Ç—å.
        
-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é —è –ø—Ä–æ–≤–æ–∂—É –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã, –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ.
-1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü —è –ø—Ä–æ–≤–æ–∂—É —ç—Ñ–∏—Ä –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–º—É.
–¢–∞–∫ –∂–µ –≤ –∫–∞–Ω–∞–ª–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏, –∫–Ω–∏–≥–∏ –∏ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â–µ.

–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –æ–ø—ã—Ç–∞ –≤ –π–æ–≥–µ –∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–µ–±—è –Ω–µ –≥–∏–±–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º.

–í—Å–µ–º—É –º–æ–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏–∫—É—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏ –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∞—Å–∞–Ω –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ª—é–±–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è. –Ø –Ω–∞ –≤—Å–µ –æ—Ç–≤–µ—á–∞—é.

–° –∫–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏?
‚Äî –±–æ–ª–∏—Ç —Å–ø–∏–Ω–∞/ —à–µ—è
‚Äî –≤—Å—Ç–∞—Ç—å –Ω–∞ —Ä—É–∫–∏
‚Äî —Ö–æ—á–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å–∞–Ω–∫—É
‚Äî –Ω–∞–ª–∞–¥–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–æ–º (–ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è, –æ—â—É—â–µ–Ω–∏—è)
‚Äî –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º—ã—à–µ—á–Ω—ã–π –∫–æ—Ä—Å–µ—Ç, –ø–æ–¥—Ç—è–Ω—É–≤ —Ç–µ–ª–æ
‚Äî —É–ª—É—á—à–∏—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É, —Ä–∞—Å–∫—Ä—ã—Ç—å –≥—Ä—É–¥–Ω–æ–π –æ—Ç–¥–µ–ª, —Ç–∞–∑–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–µ
‚Äî –Ω–∞—É—á–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏/ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
‚Äî –ø–æ–¥–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –≤ –ø–ª—é—Å
‚Äî –Ω–∞–ª–∞–¥–∏—Ç—å —Ä–µ–∂–∏–º —Å–Ω–∞

–∏ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë.
'''
    await message.answer(
        text=subscribe_text,
        reply_markup=subscribe_keyboard
    )
    
async def get_media_reviews():
    media = MediaGroupBuilder()
    for review in Review.get_all_reviews():
        media.add_photo(media=review.photo)
    return media
    
@dp.message(F.text == 'üó£Ô∏è–û—Ç–∑—ã–≤—ã')
async def reviews_message(message: Message, state: FSMContext):
    media = await get_media_reviews()
    await bot.send_media_group(chat_id=message.from_user.id,
                               media=media.build())
    await message.answer(
        text='–ë–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –≤ –º–æ–µ–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ',
        reply_markup=subscribe_keyboard
    )

@dp.message(F.text =='üëê–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã')
async def get_q_and_a(message: Message, state: FSMContext):
    await message.delete()
    await message.answer(
        text='''–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—à—å —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç''',
        reply_markup=q_and_a
    )
    
@dp.message(F.text == '–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å‚ùì')
async def level(message: Message, state: FSMContext):
    await message.answer(
        text='–ü–æ–¥–æ–π–¥—ë—Ç –Ω–æ–≤–∏—á–∫–∞–º –∏ –æ–ø—ã—Ç–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–º.\n–ù–∞ –∫–∞–Ω–∞–ª–µ –º—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –±–∞–∑—É.'
    )
    
@dp.message(F.text == '–ö–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ‚ùì')
async def orientir(message: Message, state: FSMContext):
    await message.answer(
        text='–í –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å —Ö—ç—à—Ç–µ–≥–∏ (¬´—Ä—É–∫–∏¬ª, ¬´—Ä–∞—Å—Ç—è–∂–∫–∞¬ª, ¬´–∫–æ—Ä¬ª, ¬´–±–∞–ª–∞–Ω—Å—ã¬ª –∏ —Ç.–¥.), —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–ê –µ—â–µ –µ—Å—Ç—å —Ö—ç—à—Ç–µ–≥ ¬´—ç—Ñ–∏—Ä¬ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ–∏—Ä.\n–í—Å—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–∫—Ä–µ–ø–µ.'
    )

@dp.message(F.text == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫‚ùì')
async def dlitelnost(message: Message, state: FSMContext):
    await message.answer(
        text='–ó–∞–Ω—è—Ç–∏—è –∏–¥—É—Ç –æ—Ç 20 –º–∏–Ω—É—Ç, –¥–æ 1:30. \n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –º–æ–∂–µ—Ç–µ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é. –ú–æ–∂–µ—Ç–µ –≤ –∑–∞–ø–∏—Å–∏, –º–æ–∂–µ—Ç–µ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ.'
    )
    
@dp.message(F.text == '–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏‚ùì')
async def mesto(message: Message):
    await message.answer(
        text='–ú–µ—Å—Ç–æ 2—Ö2 –º–µ—Ç—Ä–∞ –∏ –∫–æ–≤—Ä–∏–∫.'
    )
    
@dp.message(F.text == '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç‚ùì')
async def howmuchforthis(message: Message):
    await message.answer(
        text='1500‚ÇΩ –Ω–∞ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü —Å –¥–æ—Å—Ç—É–ø–æ–º –∫–æ –≤—Å–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏ –ø—Ä—è–º—ã–º —ç—Ñ–∏—Ä–∞–º, —Ç–∞–∫ –∂–µ –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ ‚Äì 3000—Ä'
    )
    
@dp.callback_query(GetSubscribeCallback.filter())
async def get_subscribe_callback(callback: CallbackQuery,
                                 callback_data: CallbackData,
                                 state: FSMContext):
    amount = callback_data.amount
    await callback.message.delete_reply_markup()
    if amount == 0:
        await trial_period(callback=callback)
        return
    await state.update_data(amount=amount)
    await callback.message.answer(
        text='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –º–Ω–µ –ø–µ—Ä–µ–≤–µ–ª –¥–µ–Ω—å–≥–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–µ –∏–º—è –∏ —Ç–≤–æ—é —Ñ–∞–º–∏–ª–∏—é.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω'
    )
    await state.set_state(PaymentState.get_fio)
    
@dp.message(PaymentState.get_fio)
async def get_fio_for_payment(message: Message, state: FSMContext):
    if len(message.text.split()) != 2:
        await message.answer(
            text='–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –Ω–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω'
        )
        return
    data = await state.get_data()
    amount = data["amount"]
    fio = message.text
    await message.answer(
        text=f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n<code>2200700449365633</code>\n+<code>79959182053</code> –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ë–µ–∫–∫–µ—Ä –î–∞–Ω–∏–∏–ª –Æ—Ä—å–µ–≤–∏—á\n\n–°—É–º–º–∞: {amount}',
        reply_markup=await generate_check_payment_keyboard(amount=amount,
                                                           fio=fio)
    )
    
@dp.message(F.text == 'ü§ù–°–≤—è–∑—å —Å–æ –º–Ω–æ–π')
async def message_to_me(message: Message, state: FSMContext):
    await message.delete()
    await message.answer(
        text='@bekkerdanya - –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        reply_markup=close_keyboard
    )    

async def trial_period(callback: CallbackQuery):
    user = User.get_by_telegram_id(callback.from_user.id)
    if user.trialed:
        await callback.answer(
            text='–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
        )
        return
    link = await bot.create_chat_invite_link(
        chat_id=CHANNEL_ID,
        member_limit=1
    )
    link = link.invite_link
    user.start_trial_date = datetime.datetime.now()
    user.trialed = True
    user.save()
    await callback.message.answer(
        text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ –¥–µ–Ω—å!',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url=link)]
            ]
        )
    )
    
@dp.callback_query(CheckPaymentCallback.filter())
async def check_payment_callback(
    callback: CallbackQuery,
    callback_data: CallbackData,
    state: FSMContext
):
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        text='–í —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É –∏ —è –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ —á–∞—Ç!'
    )
    fio = callback_data.fio
    await state.clear()
    amount = callback_data.amount
    telegram_id = callback.from_user.id
    admin_id = User.get_admins()[-1].telegram_id
    await bot.send_message(
        chat_id=admin_id,
        text=f"{fio} –¥–æ–ª–∂–µ–Ω(-–Ω–∞) –±—ã–ª(-–∞) –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount}–†",
        reply_markup=await generate_confirm_payment_keyboard(
            amount=amount,
            fio=fio,
            telegram_id=telegram_id
        )
    )
    
# @dp.message(Command('ban'))
# async def ban(message: Message, state: FSMContext):
#     await bot.ban_chat_member(chat_id=CHANNEL_ID,
#                               user_id=message.from_user.id)
#     await bot.unban_chat_member(chat_id=CHANNEL_ID,
#                                 user_id=message.from_user.id)
        
# @dp.message(F.text)
# async def aaa(message: Message, state: FSMContext):
#     await bot.send_message(chat_id=message.from_user.id,
#                            text=str(message.forward_from_chat.id))

# @dp.message(F.photo)
# async def photo_id(message: Message, state: FSMContext):
#     await message.answer(
#         text=f'<code>{message.photo[-1].file_id}</code>'
#     )