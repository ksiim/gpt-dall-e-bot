import asyncio

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from bot import bot

from models.dbs.orm import Orm
from models.dbs.models import *

from .callbacks import *


waiting_text = "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞..."

async def generate_rates_info_text():
    return f"""
–î–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º AI-—Å–µ—Ä–≤–∏—Å–∞–º –ø—Ä—è–º–æ –≤ Telegram:

–ë–µ—Å–ø–ª–∞—Ç–Ω–æ | –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û
‚úîÔ∏è 50 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚úîÔ∏è GPT-4o mini
(–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –≤ /model)

‚úÖ PLUS | –ú–ï–°–Ø–¶
‚úîÔ∏è 100 –∑–∞–ø—Ä–æ—Å–æ–≤ GPT-4o mini –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
‚úîÔ∏è 50 –∑–∞–ø—Ä–æ—Å–æ–≤ GPT-4o
üåÖ 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫ Dall-E

–°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä.

üî•Pro X2 | –ú–ï–°–Ø–¶
‚úåÔ∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 2 —Ä–∞–∑–∞:
‚úîÔ∏è 200 –∑–∞–ø—Ä–æ—Å–æ–≤ GPT-4o mini –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
‚úîÔ∏è 100 –∑–∞–ø—Ä–æ–æ—Å–≤ GPT-4o
üåÖ 20 –∫–∞—Ä—Ç–∏–Ω–æ–∫ Dall-E
–°—Ç–æ–∏–º–æ—Å—Ç—å: 499 —Ä.

üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã: @GPT_helpAi
"""

discount = {
    1: 1,
    3: 0.95,
    6: 0.9,
    12: 0.8
}

async def generate_profile_text(user: User):
    return f"""–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
ID: {user.telegram_id}
–ü–æ–¥–ø–∏—Å–∫–∞: {await rate_name(user.rate.id)}
{"\n" if user.rate_id > 1 else "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ /premium\n"}
**–õ–∏–º–∏—Ç—ã**
{await generate_limits_text(user)}
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ {'–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' if user.rate.name == 'free' else '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å'} –≤ 00:00"""

async def generate_payment_keyboard(payment_link: str, payment_id: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–ø–ª–∞—Ç–∏—Ç—å",
                    web_app=WebAppInfo(
                        url=payment_link,
                    )
                ),
                InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment:{payment_id}"
                )
            ]
        ]
    )

async def rate_name(rate_id):
    match rate_id:
        case 1:
            return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è ‚òëÔ∏è'
        case 2:
            return 'Plus ‚úÖ'
        case 3:
            return 'Pro üî•'
            

async def generate_change_rate_text():
    rates = await Orm.get_rates_for_sell()
    result = ""
    for rate in rates:
        result += f"–¢–∞—Ä–∏—Ñ **{rate.name.capitalize()}** - {rate.price}‚ÇΩ/–º–µ—Å—è—Ü\n"
        for model in rate.models_limits:
            result += f"    –ú–æ–¥–µ–ª—å: {model.model.replace('_', '-')} - {model.daily_limit} {await incline_by_limit(model.daily_limit)}\n"
        result += "\n"
    return result
    
async def incline_by_limit(limit):
    if limit > 20:
        limit = limit % 10
        
    if limit == 1:
        return "–∑–∞–ø—Ä–æ—Å"
    elif limit in (2, 3, 4):
        return "–∑–∞–ø—Ä–æ—Å–∞"
    else:
        return "–∑–∞–ø—Ä–æ—Å–æ–≤"
    
async def generate_limits_text(user: User):
    chat_model_enum_value = user.chat_model.value
    chat_model_enum_name = ChatModelEnum(chat_model_enum_value).name
    limit_chat = user.rate.daily_limit_dict[chat_model_enum_name]
    image_model_enum_value = user.image_model.value
    image_model_enum_name = ImageModelEnum(image_model_enum_value).name
    limit_image = user.rate.daily_limit_dict[image_model_enum_name]
    return f"""‚úçÔ∏è{chat_model_enum_value} - {limit_chat - await get_count_of_requests(chat_model_enum_name, user)}/{limit_chat}
üñº{image_model_enum_value} - {limit_image - await get_count_of_requests(image_model_enum_name, user)}/{limit_image}
"""

async def get_count_of_requests(model: str, user):
    count_of_requests = await Orm.get_count_of_requests(model, telegram_id=user.telegram_id)
    return count_of_requests

async def generate_current_models_text(user: User):
    return f"""
ChatGPT-4o:

üåü –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
üß† –ò–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á

ChatGPT-4o mini:

üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á, –≥–¥–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–ª–æ–∂–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    """

async def generate_statistic_text():
    yesterday, today, all_users_count, online_count = await asyncio.gather(
        Orm.get_yesterday_count(),
        Orm.get_today_count(),
        Orm.get_all_users_count(),
        Orm.get_online_count(),
    )

    try:
        diff = int((today / yesterday - 1) * 100)
    except ZeroDivisionError:
        diff = 0

    arrow_text = f"‚Üë{diff}%" if diff >= 0 else f"‚Üì{diff}%"
    return f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚úÖ –°–µ–≥–æ–¥–Ω—è –≤ –±–æ—Ç–∞ –ø—Ä–∏—à–ª–æ {today} —á–µ–ª. ({arrow_text})
‚úÖ –í—á–µ—Ä–∞ –≤ –±–æ—Ç–∞ –ø—Ä–∏—à–ª–æ {yesterday} —á–µ–ª.

üî• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users_count}

üëâ –æ–Ω–ª–∞–π–Ω {online_count}
"""

async def generate_rates_keyboard():
    rates = await Orm.get_rates_for_sell()
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=" ".join([r.upper() for r in rate.name.split()]),
                    callback_data=f"buy_rate:{rate.id}"
                ) for rate in rates
            ]
        ]
    )
    
async def incline_by_period(period):
    if period == 1:
        return "–º–µ—Å—è—Ü"
    elif period in (2, 3, 4):
        return "–º–µ—Å—è—Ü–∞"
    else:
        return "–º–µ—Å—è—Ü–µ–≤"
    
async def generate_period_keyboard(rate_id: int):
    rate = await Orm.get_rate_by_id(rate_id)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"1 –ú–µ—Å—è—Ü {rate.price}‚ÇΩ",
                    callback_data=f"period:{rate_id}:1"
                ),
                InlineKeyboardButton(
                    text=f"3 –ú–µ—Å—è—Ü–∞ {rate.price_3}‚ÇΩ",
                    callback_data=f"period:{rate_id}:3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text=f"6 –ú–µ—Å—è—Ü–µ–≤ {rate.price_6}‚ÇΩ",
                    callback_data=f"period:{rate_id}:6"
                ),
                InlineKeyboardButton(
                    text=f"12 –ú–µ—Å—è—Ü–µ–≤ {rate.price_12}‚ÇΩ",
                    callback_data=f"period:{rate_id}:12"
                ),
            ]
        ]
    )

async def generate_start_text(message):
    return f"""–†–∞–¥ —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, {message.from_user.full_name}! –Ø Telegram –±–æ—Ç ChatGPT + Dall-E

–ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üòâ

–£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã /help"""

help_text = """
–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º OpenAI, —Ç–∞–∫–∏–º –∫–∞–∫ ChatGPT, Midjourney –∏ Dall-E, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ß–∞—Ç–±–æ—Ç —É–º–µ–µ—Ç:
1. –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
2. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –ª—é–±–æ–π
3. –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
4. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

ü§ñ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ —Å–∞–π—Ç ChatGPT

‚úçÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç

üåÖ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /img –∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ

üîÑ –ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reset 

–ö–æ–º–∞–Ω–¥—ã
/start - –ß—Ç–æ —É–º–µ–µ—Ç —á–∞—Ç-–±–æ—Ç
/profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/premium- –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/reset - —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
/mode - –≤—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
/img - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/help - –ø–æ–º–æ—â—å
"""

close_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
        ]
    ]
)

async def generate_model_markup(user: User):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ" + e.value if user.chat_model.value == e.value else "" + e.value,
                    callback_data=f"change_to:{e.name}"
                )
                ] for e in ChatModelEnum
        ]
    )

buy_premium_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
                callback_data="change_rate"
            )
        ]
    ]
)